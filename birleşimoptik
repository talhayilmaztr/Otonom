import time
import cv2
import numpy as np
from pymavlink import mavutil
from picamera2 import Picamera2, Preview
from picamera2.encoders import H264Encoder

# Sabitler
k_p = 0.1
frame_center_x = 640 / 2
frame_center_y = 480 / 2

class CameraStabilization():
    feature_params = dict(maxCorners=100, qualityLevel=0.3, minDistance=7, blockSize=7)
    lk_params = dict(winSize=(15, 15), maxLevel=2, criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

    def __init__(self):
        self.color = np.random.randint(0, 255, (100, 3))
        self.display_mask = None
        self.old_gray = None
        self.p0 = None

    def resetFeatures(self, initial_img):
        self.display_mask = np.zeros_like(initial_img)
        self.old_gray = cv2.cvtColor(initial_img, cv2.COLOR_BGR2GRAY)
        self.p0 = cv2.goodFeaturesToTrack(self.old_gray, mask=None, **self.feature_params)

    def calculateCameraDrift(self, frame):
        movement = np.zeros(2)
        precise = True

        frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        if self.p0 is None:
            self.resetFeatures(frame)
            precise = False
        else:
            p1, st, err = cv2.calcOpticalFlowPyrLK(self.old_gray, frame_gray, self.p0, None, **self.lk_params)
            if p1 is None:
                self.resetFeatures(frame)
                return

            good_new = p1[st == 1]
            good_old = self.p0[st == 1]
            self.display(frame, good_new, good_old)

            dist_movement = good_new - good_old
            if dist_movement.shape[0] > 1:
                dist_movement_accurate, total_std = self.cutOutliers(dist_movement)
                movement = np.mean(dist_movement_accurate, 0)

                self.old_gray = frame_gray.copy()
                self.p0 = good_new.reshape(-1, 1, 2)

                if total_std > 10:
                    precise = False
                else:
                    precise = True
            else:
                self.resetFeatures(frame)

        return movement, precise

    def cutOutliers(self, list, num_std=2):
        list_mean = np.mean(list, 0)
        std = np.std(list, 0)
        outlier_cut = num_std * std
        total_std = np.average(std)
        binary_mask_up = list <= list_mean + outlier_cut
        binary_mask_down = list >= list_mean - outlier_cut
        mask_measure = binary_mask_up & binary_mask_down
        mask_outlier = np.min(mask_measure, 1)

        return list[mask_outlier], total_std

    def display(self, frame, good_new, good_old):
        for i, (new, old) in enumerate(zip(good_new, good_old)):
            a, b = new.ravel()
            c, d = old.ravel()
            a, b, c, d = int(a), int(b), int(c), int(d)

            self.display_mask = cv2.line(self.display_mask, (a, b), (c, d), self.color[i].tolist(), 2)
            frame = cv2.circle(frame, (a, b), 5, self.color[i].tolist(), -1)

        img = cv2.add(frame, self.display_mask)
        cv2.imshow('frame', img)
        return frame

def connect_to_pixhawk():
    master = mavutil.mavlink_connection('/dev/ttyAMA0', baud=57600)
    master.wait_heartbeat()
    print("Pixhawk'a bağlanıldı")
    return master

def ready_arm_mode(master):
    print("Arming kontrolleri devre dışı bırakılıyor...")
    set_param(master, 'ARMING_CHECK', 0)
    set_param(master, 'DISARM_DELAY', 127)

def go_arm_mode(master):
    print("İHA arming moduna geçiriliyor...")
    master.arducopter_arm()
    master.motors_armed_wait()
    print("İHA arming modunda")

def set_mode(master, mode):
    mode_id = master.mode_mapping()[mode]
    master.set_mode(mode_id)
    ack = False
    while not ack:
        ack_msg = master.recv_match(type='COMMAND_ACK', blocking=True).to_dict()
        if ack_msg['command'] == mavutil.mavlink.MAV_CMD_DO_SET_MODE:
            ack = True
    print(f"Uçuş modu {mode} olarak değiştirildi")

def takeoff(master, target_altitude):
    print(f"{target_altitude} metreye kalkış yapılıyor")
    master.mav.command_long_send(
        master.target_system,
        master.target_component,
        mavutil.mavlink.MAV_CMD_NAV_TAKEOFF,
        0, 0, 0, 0, 0, 0, 0, target_altitude
    )
    ack = False
    while not ack:
        ack_msg = master.recv_match(type='COMMAND_ACK', blocking=True).to_dict()
        if ack_msg['command'] == mavutil.mavlink.MAV_CMD_NAV_TAKEOFF and ack_msg['result'] == mavutil.mavlink.MAV_RESULT_ACCEPTED:
            ack = True
    print(f"{target_altitude} metreye ulaşıldı")

def land(master):
    print("İHA iniş yapıyor...")
    master.mav.command_long_send(
        master.target_system,
        master.target_component,
        mavutil.mavlink.MAV_CMD_NAV_LAND,
        0, 0, 0, 0, 0, 0, 0, 0
    )
    ack = False
    while not ack:
        ack_msg = master.recv_match(type='COMMAND_ACK', blocking=True).to_dict()
        if ack_msg['command'] == mavutil.mavlink.MAV_CMD_NAV_LAND and ack_msg['result'] == mavutil.mavlink.MAV_RESULT_ACCEPTED:
            ack = True
    print("Başarıyla inildi")

def set_param(master, param_id, param_value):
    print(f"{param_id} parametresi {param_value} olarak ayarlanıyor")
    master.mav.param_set_send(master.target_system, master.target_component, param_id.encode('utf-8'), param_value, mavutil.mavlink.MAV_PARAM_TYPE_REAL32)
    time.sleep(1)
    while True:
        param = master.recv_match(type='PARAM_VALUE', blocking=True)
        if param.param_id.strip() == param_id:
            if param.param_value == param_value:
                print(f"{param_id} parametresi başarıyla {param_value} olarak ayarlandı")
            else:
                print(f"{param_id} parametresi {param_value} olarak ayarlanamadı")
                raise Exception(f"{param_id} parametresi ayarlanamadı")
            break

def calculate_optical_flow(prev_gray, gray):
    flow = cv2.calcOpticalFlowFarneback(prev_gray, gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)
    avg_flow_x = np.mean(flow[..., 0])
    avg_flow_y = np.mean(flow[..., 1])
    return avg_flow_x, avg_flow_y

def apply_morphology(mask):
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    mask = cv2.erode(mask, kernel, iterations=1)
    mask = cv2.dilate(mask, kernel, iterations=2)
    return mask

def colorProcess(frame):
    red_centers = []
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    lower_red = np.array([0, 100, 100])
    upper_red = np.array([10, 255, 255])
    red_lower2 = np.array([160, 100, 100])
    red_upper2 = np.array([179, 255, 255])
    mask1 = cv2.inRange(hsv, lower_red, upper_red)
    mask2 = cv2.inRange(hsv, red_lower2, red_upper2)
    mask = mask1 | mask2
    mask = apply_morphology(mask)
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area > 1940:
            hull = cv2.convexHull(cnt)
            hull_area = cv2.contourArea(hull)
            solidity = float(area) / hull_area if hull_area > 0 else 0
            perimeter = cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, 0.08 * perimeter, True)
            if len(approx) == 4 and solidity > 0.8:
                x, y, w, h = cv2.boundingRect(cnt)
                center = (x + w / 2, y + h / 2)
               ```python
                red_centers.append((center[0], center[1], w, h))

    return red_centers, frame

def start_video_recording(camera, file_path):
    encoder = H264Encoder()
    camera.start_recording(encoder, file_path)
    print(f"Video kaydı başlatıldı: {file_path}")

def stop_video_recording(camera):
    camera.stop_recording()
    print("Video kaydı durduruldu")

def move_towards_target(master, vx, vy, vz):
    master.mav.send(mavutil.mavlink.MAVLink_set_position_target_local_ned_message(
        10, master.target_system, master.target_component,
        mavutil.mavlink.MAV_FRAME_BODY_NED, 0b0000111111000111,
        0, 0, 0, vx, vy, vz, 0, 0, 0, 0, 0))

if __name__ == "__main__":
    try:
        # Pixhawk bağlantısı
        master = connect_to_pixhawk()

        # Kamera yapılandırması
        camera = Picamera2()
        video_file_path = '/home/bergusi/Desktop/flight_video.h264'
        config = camera.create_video_configuration(main={"size": (640, 480)}, controls={"FrameRate": 30})
        camera.configure(config)
        camera.start_preview(Preview.QTGL)

        # Video kaydını başlat
        start_video_recording(camera, video_file_path)

        # Uçuş işlemleri
        ready_arm_mode(master)
        time.sleep(5)
        go_arm_mode(master)
        set_mode(master, 'GUIDED')
        takeoff(master, 7)
        time.sleep(5)  # Kalkış sonrası stabilize olması için bekleme süresi

        # GPS bağlantısını kes
        set_param(master, 'EKF_GPS_TYPE', 3)
        time.sleep(2)

        # OpenCV kullanarak PiCamera2'den görüntü alımı
        prev_gray = None
        stabilizer = CameraStabilization()
        start_time = time.time()

        while True:
            frame = camera.capture_array()
            red_centers, processed_frame = colorProcess(frame)

            if len(red_centers) > 0:
                current_x, current_y, _, _ = red_centers[0]
                error_x = frame_center_x - current_x
                error_y = frame_center_y - current_y

                vx = k_p * error_x
                vy = k_p * error_y

                move_towards_target(master, vx, vy, 0)

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            if prev_gray is not None:
                avg_flow_x, avg_flow_y = calculate_optical_flow(prev_gray, gray)

                if np.abs(avg_flow_x) > 0.1 or np.abs(avg_flow_y) > 0.1:
                    vx -= avg_flow_x * k_p
                    vy -= avg_flow_y * k_p
                    move_towards_target(master, vx, vy, 0)

            prev_gray = gray

            cv2.imshow('Processed Frame', processed_frame)

            if time.time() - start_time > 60:
                land(master)
                break

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        # Video kaydını durdur
        stop_video_recording(camera)
        camera.stop_preview()
        camera.close()

    except KeyboardInterrupt:
        print("Kullanıcı tarafından kesildi")
        stop_video_recording(camera)
        camera.stop_preview()
        camera.close()
    except Exception as e:
        print(f"Bir hata oluştu: {e}")
        stop_video_recording(camera)
        camera.stop_preview()
        camera.close()
