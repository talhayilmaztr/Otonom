import time
import cv2
import numpy as np
from pymavlink import mavutil

# Sabitler
k_p = 0.1  # P kontrol kazancı (gerektiğinde ayarlanabilir)
frame_center_x = 640 / 2  # Çerçeve merkezinin x koordinatı (çözünürlüğe göre ayarlayın)
frame_center_y = 480 / 2  # Çerçeve merkezinin y koordinatı (çözünürlüğe göre ayarlayın)

# Pixhawk'a bağlantı sağlıyoruz
def connect_to_pixhawk():
    master = mavutil.mavlink_connection('/dev/ttyAMA0', baud=57600)
    master.wait_heartbeat()
    print("Pixhawk'a bağlanıldı")
    return master

# Arming moduna hazırlık
def ready_arm_mode(master):
    print("Arming kontrolleri devre dışı bırakılıyor...")
    set_param(master, 'ARMING_CHECK', 0)
    set_param(master, 'DISARM_DELAY', 127)

# Arming moduna geçiş
def go_arm_mode(master):
    print("İHA arming moduna geçiriliyor...")
    master.arducopter_arm()
    master.motors_armed_wait()
    print("İHA arming modunda")

# Uçuş modunu değiştirme
def set_mode(master, mode):
    mode_id = master.mode_mapping()[mode]
    master.set_mode(mode_id)
    ack = False
    while not ack:
        ack_msg = master.recv_match(type='COMMAND_ACK', blocking=True)
        ack_msg = ack_msg.to_dict()
        if ack_msg['command'] == mavutil.mavlink.MAV_CMD_DO_SET_MODE:
            ack = True
    print(f"Uçuş modu {mode} olarak değiştirildi")

# Kalkış yapma
def takeoff(master, target_altitude):
    print(f"{target_altitude} metreye kalkış yapılıyor")
    master.mav.command_long_send(
        master.target_system,
        master.target_component,
        mavutil.mavlink.MAV_CMD_NAV_TAKEOFF,
        0,
        0, 0, 0, 0, 0, 0, target_altitude
    )
    ack = False
    while not ack:
        ack_msg = master.recv_match(type='COMMAND_ACK', blocking=True)
        ack_msg = ack_msg.to_dict()
        if ack_msg['command'] == mavutil.mavlink.MAV_CMD_NAV_TAKEOFF and ack_msg['result'] == mavutil.mavlink.MAV_RESULT_ACCEPTED:
            ack = True
    print(f"{target_altitude} metreye ulaşıldı")

# İniş yapma
def land(master):
    print("İHA iniş yapıyor...")
    master.mav.command_long_send(
        master.target_system,
        master.target_component,
        mavutil.mavlink.MAV_CMD_NAV_LAND,
        0,
        0, 0, 0, 0, 0, 0, 0
    )
    ack = False
    while not ack:
        ack_msg = master.recv_match(type='COMMAND_ACK', blocking=True)
        ack_msg = ack_msg.to_dict()
        if ack_msg['command'] == mavutil.mavlink.MAV_CMD_NAV_LAND and ack_msg['result'] == mavutil.mavlink.MAV_RESULT_ACCEPTED:
            ack = True
    print("Başarıyla inildi")

# Parametre ayarlama
def set_param(master, param_id, param_value):
    print(f"{param_id} parametresi {param_value} olarak ayarlanıyor")
    master.mav.param_set_send(
        master.target_system,
        master.target_component,
        param_id.encode('utf-8'),
        param_value,
        mavutil.mavlink.MAV_PARAM_TYPE_REAL32
    )
    time.sleep(1)

    while True:
        param = master.recv_match(type='PARAM_VALUE', blocking=True)
        if param.param_id.strip() == param_id:
            if param.param_value == param_value:
                print(f"{param_id} parametresi başarıyla {param_value} olarak ayarlandı")
            else:
                print(f"{param_id} parametresi {param_value} olarak ayarlanamadı")
                raise Exception(f"{param_id} parametresi ayarlanamadı")
            break

# IMU verilerini al
def get_attitude(master):
    attitude_msg = master.recv_match(type='ATTITUDE', blocking=True)
    roll = attitude_msg.roll
    pitch = attitude_msg.pitch
    yaw = attitude_msg.yaw
    return roll, pitch, yaw

# Barometre verilerini al
def get_altitude(master):
    altitude_msg = master.recv_match(type='GLOBAL_POSITION_INT', blocking=True)
    altitude = altitude_msg.relative_alt / 1000.0  # metre cinsinden irtifa
    return altitude

if __name__ == "__main__":
    try:
        master = connect_to_pixhawk()
        ready_arm_mode(master)
        time.sleep(5)
        go_arm_mode(master)
        set_mode(master, 'GUIDED')
        takeoff(master, 5)
        time.sleep(3)  # 3 saniye bekle
        
        # GPS sinyalini kes
        set_param(master, 'EKF_GPS_TYPE', 3)  # 3: GPS kullanımı devre dışı
        
        # GPS kesildikten sonra 10 saniye bekle
        time.sleep(10)
        
        # IMU ve barometre verilerini kontrol et
        for _ in range(10):  # 10 saniye boyunca IMU ve barometre verilerini al
            roll, pitch, yaw = get_attitude(master)
            altitude = get_altitude(master)
            print(f"Roll: {roll}, Pitch: {pitch}, Yaw: {yaw}, Altitude: {altitude}m")
            time.sleep(1)
        
        # Belirli süre sonra iniş yap
        land(master)
    except KeyboardInterrupt:
        print("Kullanıcı tarafından kesildi")
